မှားတတ်တဲ့ အရာများ

++ Incresement နဲ့ -- Decresement Operators တွေက 
Variable name ရဲ့ ရှေ့မှာ သို့မဟုတ် နောက်မှာ ထားလည်း ထို variabale တန်ဖိုးများကို 1 တိုးခြင်း 1 လျှော့ခြင်း များကို ဆောင်ရွက်နိုင်ပါတယ်။
သို့ပေမဲ့ အခြား variable တစ်ခုကို သူတို့ရဲ့ တန်ဖိုးနဲ့ assign လုပ်တဲ့နေရာမှာ တန်ဖိုးများ ကွဲပြားသွားပါတယ်။ 

ဥပမာ -

int a, b;
a = 2;
b = a++;

ဆိုရင် a တန်ဖိုး က ++ (increment) လုပ်ထားတဲ့ အတွက် 3 ကို ပြောင်းသွားပါမယ်။ 
b တန်ဖိုးကလည်း a တန်ဖိုးနဲ့ assign လုပ်ပေးတဲ့ အတွက် b တန်ဖိုးလည်း 3 ဖြစ်သွားပါမယ်။

b = ++a; လို့ operator ကိုရှေ့ကို ပြောင်းလိုက်တဲ့အခါမှာ ကြတော့  a တန်ဖိုး 3 သို့ တိုးသွားပေမဲ့ b တန်ဖိုးကို a ရဲ့ မူလတန်ဖိုးနဲ့သာ assign လုပ်ပေးမှာ ဖြစ်ပါတယ်။
ထို့ကြောင့် b သည် 2 ဖြစ်ပါလိမ့်မည်။


ဘာ့ကြောင့်လဲဆိုတော့ b = a++; သည် a တန်ဖိုးကို အရင် increase လုပ်ပြီးမှ b သို့ assign လုပ်ခြင်းဖြစ်ပြီး၊
b = ++a; သည် b သို့ အရင် assign လုပ်ပြီးမှ a တန်ဖိုးကို increase လုပ်ခြင်းကြောင့်ဖြစ်သည်။


-------------------------------------------------------------------------------

မျက်စိလည်တတ်တဲ့

comma operator

int a = 1,2,3;
တွင် a assigned တန်ဖိုးသည် ရှေ့ဆုံး က 1 သာဖြစ်သည် ကျန် 2, 3 က constant များသာဖြစ်သည်။ 
int a =(1,2,3); သည် comma operator ဖြစ်သည့်အတွက် a တန်ဖိုးသည် ညာဘက်ဆုံက 3 ဖြစ်သည်။

int fun(){
    return 1,2,3;
}

နှင့်တူသည်။ int a=1,2,3; သည် 1 ကို a မှာ assign လုပ်ခြင်တဲ့ အတွက် 1 တစ်ခုသာ execute လုပ်ပါမည်။
int a =(1,2,3); ကမူ left to right တစ်ခုခြင်း excute လုပ်ပြီးမှ ညာစွန်းဆုံး တန်ဖိုးကို assign လုပ်ပေးပါမည်။

ရင်းသွားအောင် အောက်ပါအတိုင်း run ကြည့်နိုင်ပါသည် -

int fun1()
{
    std::cout << "fun1()" << std::endl;
    return 1;
}

int fun2()
{
    std::cout << "fun3()" << std::endl;
    return 2;
}

int fun3()
{
    std::cout << "fun3()" << std::endl;
    return 3;
}

int main()
{
    int a = fun1(), fun2(), fun3();
    //int a = (fun1(), fun2(), fun3());
    std::cout << "\na: " << a << std::endl;
    return 0;
}

-----------------------------------------------------------------------------

Inline function

-----------------------------------------------------------------------------

Languages တော်တော်များမှာ မပါတဲ့ control statement ကတော့ goto ပါ။

----------------------------------------------------------------------------


in some programming language

 do{ /*code*/ } while(condition); နဲ့ while(condition){/*code*/} နဲ့ ဘာကွာလဲဆိုရင် condition false ပြောင်းသွားလို့ loop ရပ်သွားတဲ့အခါ do while က do ထက်တစ်ကြိမ်ပိုပြီး အလုပ်လုပ်တယ်။


-----------------------------------------------------------------------------

cpu = 100;
ram = 50;
motherboad = 150;

//NORMAL LOGIC
swift(val){
    case "cpu & ram" : total = cpu + ram; beak;
    case "ram" : total = ram; break;
    case "motherboad": total = motherboad; break;
}

//DIFFERENT LOGIC
swift(val){
    case "cpu & ram" : total = cpu;
    case "ram" : total += ram; break;
    case "motherboad": total = motherboad; break;
}

------------------------------------------------------------------------------

function (သို့မဟုတ်)  variable တစ်ခုရဲ့ memory address ကို သိမ်းပေးနိုင်တဲ့ variable ကို pointer လို့ခေါ်တယ်။

ဥပမာ - int x = 1; ဆိုလျှင် သူ memory address က &x ဖြစ်တယ်။

cout << &x << endl; လို့ print ထုတ်ရင် 0x7ff********* ဆိုပြီး သိမ်းထားတဲ့ address ကို ပြလိမ့်မယ်။

အဲဒီ address ကို program မှာ ပြန်သိမ်းဖို့ ကို pointer ဆိုတဲ့ variable လိုတယ်။ 
pointer variable မှာ address ကို assign လုပ်ပုံကတော့။ ဥပမာ xp မှာ assign မယ်ပေါ့။
int *xp = &x; ဆိုပြီး ရေးရတယ်။

*xp ဆိုတာက pointer ပေါ့ &x ကတော့ address ပေါ့။ 

ဘာတွေ အကျိူးကျေးဇူးထူး မလဲဆိုတော့ အောက်က code ကိုကြည့်ရင် နာလည်လိမ့်မယ်။

int x = 1;
int *xp = &x;
x = 2;
cout << *xp <<endl;

output : 2 

ကျွန်တော်တို့ print လိုက်တာ *xp ပါ၊ 2 ကို assign ပေးလိုက်တာ x မှာ၊ ပြီးတော့  *xp မှာ &x ကို assign ပြီးမှ x မှာ 2 ကို assign လုပ်လိုက်တာပါ။ output က 2 ထွက်ပါတယ်။

ဘယ်တော့မှ address ကို အခြား values နဲ့ assign လုပ်ရမှာမဟုတ်ပါဘူး။
address ကပြင်လို့ မရတဲ့ value ဖြစ်နေလို့ပါ။

ဘာလုပ်လို့ရလဲ ဆိုတော့ ရတနာသိုက် ရသွားသလိုပါပဲ။
int x[5] = {10, 20, 50, 40, 50};
 x[index] //array accessed with array notation.
 *(i+index) //array accessed with pointer notation
 int *xp = x;
 *(xp++) //array accessed with pointer



construct လုပ်တာ ကောင်ထဲက item ကို ခေါ်ချင်ရင် ပုံမှန်မှာ (. dot operator) ကိုသုံးပါတယ်။ pointer မှာတော့ (-> member pointer operator ) ကိုသုံးပါတယ်။


